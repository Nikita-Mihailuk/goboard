services:
  api_gateway:
    container_name: api_gateway
    build: backend/api_gateway
    depends_on:
      - auth_service
      - article_service
      - comment_service
    ports:
      - "8080:${HTTP_PORT}"
    volumes:
      - api-static:/app/static
    environment:
      HTTP_PORT:  ${HTTP_PORT}
      GRPC_TIMEOUT: ${GRPC_TIMEOUT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      ARTICLE_SERVICE_HOST: ${ARTICLE_SERVICE_HOST}
      ARTICLE_SERVICE_PORT: ${ARTICLE_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      SECRET_KEY: ${SECRET_KEY}

  user_service:
    container_name: user_service
    build: backend/user_service
    command: sh -c "./migrator --migrations-path=./migrations --db-url=${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME} && ./user_service"
    depends_on:
      user_db:
        condition: service_healthy
      kafka1:
        condition: service_started # TODO: add healthcheck
      kafka2:
        condition: service_started # TODO: add healthcheck
      kafka3:
        condition: service_started # TODO: add healthcheck
    environment:
      ENV: ${ENV}
      PORT: ${USER_SERVICE_PORT}
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_USERNAME: ${POSTGRES_USERNAME}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_NAME}
      KAFKA_PROD_TOPIC: ${KAFKA_PROD_TOPIC}
      KAFKA_ADDRESS: "kafka1:${KAFKA1_PORT},kafka2:${KAFKA2_PORT},kafka3:${KAFKA3_PORT}"

  user_db:
    container_name: user_db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user-db-data:/var/lib/postgresql/data

  article_service:
    container_name: article_service
    build: backend/article_service
    depends_on:
      article_db:
        condition: service_healthy
      kafka1:
        condition: service_started # TODO: add healthcheck
      kafka2:
        condition: service_started # TODO: add healthcheck
      kafka3:
        condition: service_started # TODO: add healthcheck
    environment:
      ENV: ${ENV}
      PORT: ${ARTICLE_SERVICE_PORT}
      DATABASE_HOST: ${MONGO_HOST}
      DATABASE_PORT: ${MONGO_PORT}
      DATABASE_USERNAME: ${MONGO_USERNAME}
      DATABASE_PASSWORD: ${MONGO_PASSWORD}
      KAFKA_ADDRESS: "kafka1:${KAFKA1_PORT},kafka2:${KAFKA2_PORT},kafka3:${KAFKA3_PORT}"
      KAFKA_USER_SERVICE_TOPIC: ${KAFKA_PROD_TOPIC}
      KAFKA_CONSUMER_GROUP: ${ARTICLE_SERVICE_CONSUMER_GROUP}

  comment_service:
    container_name: comment_service
    build: backend/comment_service
    depends_on:
      article_db:
        condition: service_healthy
      kafka1:
        condition: service_started # TODO: add healthcheck
      kafka2:
        condition: service_started # TODO: add healthcheck
      kafka3:
        condition: service_started # TODO: add healthcheck
    environment:
      ENV: ${ENV}
      PORT: ${COMMENT_SERVICE_PORT}
      DATABASE_HOST: ${MONGO_HOST}
      DATABASE_PORT: ${MONGO_PORT}
      DATABASE_USERNAME: ${MONGO_USERNAME}
      DATABASE_PASSWORD: ${MONGO_PASSWORD}
      KAFKA_ADDRESS: "kafka1:${KAFKA1_PORT},kafka2:${KAFKA2_PORT},kafka3:${KAFKA3_PORT}"
      KAFKA_USER_SERVICE_TOPIC: ${KAFKA_PROD_TOPIC}
      KAFKA_CONSUMER_GROUP: ${COMMENT_SERVICE_CONSUMER_GROUP}

  article_db:
    container_name: article_db
    image: mongo:latest
    restart: always
    command:
      - mongod
      - --quiet
      - --logappend
      - --logpath=/proc/1/fd/1
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - article-db-data:/data/db

  auth_service:
    container_name: auth_service
    build: backend/auth_service
    depends_on:
      redis:
        condition: service_healthy
      user_service:
        condition: service_started # TODO: add healthcheck
    environment:
      ENV: ${ENV}
      PORT: ${AUTH_SERVICE_PORT}
      DATABASE_HOST: ${REDIS_HOST}
      DATABASE_PORT: ${REDIS_PORT}
      DATABASE_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_NUMBER: ${REDIS_NUMBER}
      ACCESS_TOKEN_TTL: ${ACCESS_TOKEN_TTL}
      REFRESH_TOKEN_TTL: ${REFRESH_TOKEN_TTL}
      SECRET_KEY: ${SECRET_KEY}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"

  kafka1:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:${KAFKA1_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "${KAFKA_AUTO_CREATE_TOPICS_ENABLE}"

  kafka2:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:${KAFKA2_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "${KAFKA_AUTO_CREATE_TOPICS_ENABLE}"

  kafka3:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:${KAFKA3_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "${KAFKA_AUTO_CREATE_TOPICS_ENABLE}"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:${KAFKA1_PORT},kafka2:${KAFKA2_PORT},kafka3:${KAFKA3_PORT}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_CLIENT_PORT}

  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - api_gateway

volumes:
  user-db-data:
  article-db-data:
  api-static:
  redis-data: